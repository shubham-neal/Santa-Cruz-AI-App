# This pipeline takes the Mariner-deployment zip from build pipeline and releases it to a test environment.
# It then releases it to blob storage account after manual approval


trigger: none

resources:
  pipelines:
  - pipeline: build
    project: UnifiedEdgeScenarios
    source: Build Mariner
    trigger:
      enabled: true

pool:
  default


variables:
  buildSuffix: '$(Build.BuildNumber)' 
  ${{ if startsWith(variables['Build.SourceBranchName'], 'release') }}:
    Variable_Group: 'Mariner_ReleaseEnvironment'
  ${{ if not(startsWith(variables['Build.SourceBranchName'], 'release')) }}:
     Variable_Group: 'Mariner_TestEnvrionment'

stages:
- stage: 'Deploy'
  jobs:
  - job: 'Deploy'
    variables:
     - group: ${{variables.Variable_Group}}
    displayName: 'Deploy Person Tracking App to a test environment'
    steps:
    - checkout: none
    - download: none

    - task: Bash@3
      enabled: true
      displayName: 'Delete existing resource group'
      env:
        SP_APP_PWD_LOGIN: $(SP_APP_PWD_LOGIN)
      inputs:
        targetType: 'inline'
        script: |
          echo "Logging to Azure"
                          
          az login --service-principal --username "$SP_APP_ID_LOGIN" --password "$SP_APP_PWD_LOGIN" --tenant "$TENANT_ID" --output "none"

          if [ "$(az group exists --name "$RESOURCE_GROUP_AMS")" == false ]; then
              echo "Resource Group for IoT Hub \"$RESOURCE_GROUP_AMS\" does not exist in current subscription."
              echo "Skipping deletion of resource group"
          else
              echo "Resource Group for IoT Hub \"$RESOURCE_GROUP_AMS\" exists in current subscription."
              PRINCIPAL_ID=$(az identity show -n "$MANAGED_IDENTITY" -g "$RESOURCE_GROUP_AMS" --query "principalId" -o tsv)
              az role assignment delete --scope "/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RESOURCE_GROUP_DEVICE" --assignee "$PRINCIPAL_ID"
              echo "Deleting Resource Group \"$RESOURCE_GROUP_AMS\""
              az group delete --resource-group "$RESOURCE_GROUP_AMS" --subscription "$SUBSCRIPTION_ID" --yes
              echo "Deleted Resource Group \"$RESOURCE_GROUP_AMS\""
          fi  

    - task: DownloadPipelineArtifact@2
      enabled: true
      displayName: 'Download artifacts from Build Pipeline'
      inputs:
        buildType: 'specific'
        project: '1ab7de3c-f8b7-4b59-be5a-fa78b4f4570c'
        definition: '10'
        buildVersionToDownload: 'latest'
        targetPath: '$(System.DefaultWorkingDirectory)'

    - task: Bash@3
      enabled: true
      displayName: 'Upload the mariner deployment scripts to temporary container in storage account'
      env:
        RELEASE_STORAGE_ACCOUNT_KEY: $(RELEASE_STORAGE_ACCOUNT_KEY)
        SP_APP_PWD_LOGIN: $(SP_APP_PWD_LOGIN)
      inputs:
        targetType: 'inline'
        script: |
          # Exit the script on any error
          set -e
          echo "Logging into Azure"
          
          az login --service-principal --username "$SP_APP_ID_LOGIN" --password "$SP_APP_PWD_LOGIN" --tenant "$TENANT_ID" --output "none"
          
          CONTAINER=$(az storage container exists --name "$RELEASE_STORAGE_ACCOUNT_TEMP_CONTAINER_NAME" --account-name "$RELEASE_STORAGE_ACCOUNT_NAME" --account-key "$RELEASE_STORAGE_ACCOUNT_KEY" -o tsv)
          
          if [ "$CONTAINER" == "False" ]; then
            echo "Creating temp container \"$RELEASE_STORAGE_ACCOUNT_TEMP_CONTAINER_NAME\" for mariner deployment scripts in storage account"
          
            az storage container create \
            --account-name $(RELEASE_STORAGE_ACCOUNT_NAME) \
            --account-key $(RELEASE_STORAGE_ACCOUNT_KEY) \
            --name "$RELEASE_STORAGE_ACCOUNT_TEMP_CONTAINER_NAME"
          
            az storage container set-permission \
            --account-name $(RELEASE_STORAGE_ACCOUNT_NAME) \
            --account-key $(RELEASE_STORAGE_ACCOUNT_KEY) \
            --name "$RELEASE_STORAGE_ACCOUNT_TEMP_CONTAINER_NAME" \
            --public-access blob
          
            echo "Created temp container \"$RELEASE_STORAGE_ACCOUNT_TEMP_CONTAINER_NAME\" for mariner deployment scripts in storage account"
          fi
          
          az storage blob upload \
            --account-name $(RELEASE_STORAGE_ACCOUNT_NAME) \
            --account-key $(RELEASE_STORAGE_ACCOUNT_KEY) \
            --container-name "$RELEASE_STORAGE_ACCOUNT_TEMP_CONTAINER_NAME" \
            --file deployment-bundle-mariner.zip \
            --name deployment-bundle-mariner.zip
          
          unzip -o deployment-bundle-mariner.zip -d .
          
        workingDirectory: '$(System.DefaultWorkingDirectory)/deployment-bundle-mariner'
    
    - task: Bash@3
      enabled: true
      displayName: 'Prerequisite software installation'
      inputs:
        targetType: 'inline'
        script: |
          sudo apt install -y curl
          sudo apt install -y jq
          sudo apt install -y timeout
          sudo apt install -y wget
          sudo apt install -y sshpass
          sudo apt install -y python-pip

          INSTALL_IOTEDGEDEV="true"
          if [ ! -z "$(command -v iotedgedev)" ]; then
            currentVersion=$(iotedgedev --version | cut -d ' ' -f3)
            requiredVersion="2.1.4"
            # Sort the current version and required version to get the lowest of the two and then then compare it with required version
            if [ "$(printf '%s\n' "$currentVersion" "$requiredVersion" | sort -V | head -n1)" == "$requiredVersion" ]; then
              # Current installed iotedgedev version is higher than required, no need to re-install
              INSTALL_IOTEDGEDEV="false"
            fi
          fi

          if [ "$INSTALL_IOTEDGEDEV" == "true" ]; then
            echo "$(info) Installing iotedgedev"
            sudo pip install iotedgedev==2.1.4
          fi

          if [[ $(az extension list --query "[?name=='azure-iot'].name" --output tsv | wc -c) -eq 0 ]]; then
            echo "$(info) Installing azure-iot extension"
            az extension add --name azure-iot
          fi
        workingDirectory: '$(System.DefaultWorkingDirectory)'

    - task: Bash@3
      enabled: true
      displayName: 'Run mariner-setup.sh script'
      env:
        SP_APP_PWD: $(SP_APP_PWD)
        MARINER_VM_PASSWORD: $(MARINER_VM_PASSWORD)
        SP_APP_PWD_LOGIN: $(SP_APP_PWD_LOGIN)
      inputs:
        targetType: 'inline'
        script: |
          echo "Starting task"

          echo "Updating sas url for deployment bundle mariner zip"
          SCRIPTS_URL="https://${RELEASE_STORAGE_ACCOUNT_NAME}.blob.core.windows.net/${RELEASE_STORAGE_ACCOUNT_TEMP_CONTAINER_NAME}/deployment-bundle-mariner.zip"
          sed -i 's#^\(SAS_URL[ ]*=\).*#\1\"'"$SCRIPTS_URL"'\"#g' "mariner-setup.sh"
          echo "Updated sas url for deployment bundle mariner zip"

          chmod +x mariner-setup.sh

          CURRENT_IP_ADDRESS=$(curl -s https://ip4.seeip.org/)
          az login --service-principal --username "$SP_APP_ID_LOGIN" --password "$SP_APP_PWD_LOGIN" --tenant "$TENANT_ID" --output "none"
          
          az network nsg rule create --name "AllowSSH" --nsg-name "$MARINER_NSG1_NAME" --priority 100 --resource-group "$MARINER_RESOURCE_GROUP" --destination-port-ranges 22 --source-address-prefixes "$CURRENT_IP_ADDRESS" --output "none"
          az network nsg rule create --name "AllowSSH" --nsg-name "$MARINER_NSG2_NAME" --priority 100 --resource-group "$MARINER_RESOURCE_GROUP" --destination-port-ranges 22 --source-address-prefixes "$CURRENT_IP_ADDRESS" --output "none"
          sudo apt install -y sshpass
          sshpass -p "$MARINER_VM_PASSWORD" scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no mariner-setup.sh "$MARINER_UNAME"@"$MARINER_PUBLIC_IP":/root/setup/mariner-setup.sh
          sleep 5s
         
          Command="az login --service-principal --username "$SP_APP_ID_LOGIN" --password "$SP_APP_PWD_LOGIN" --tenant "$TENANT_ID" --output "none" "
          sshpass -p "$MARINER_VM_PASSWORD" ssh "$MARINER_UNAME"@"$MARINER_PUBLIC_IP" -o StrictHostKeyChecking=no "$Command"
          echo "Running script"
          Command="echo $(ls); sudo bash /root/setup/mariner-setup.sh --rg-ams "$RESOURCE_GROUP_AMS" --rg-device "$RESOURCE_GROUP_DEVICE" --use-existing-sp "$USE_EXISTING_SP" --sp-id "$SP_APP_ID" --sp-password "$SP_APP_PWD" --sp-object-id "$OBJECT_ID""
          sshpass -p "$MARINER_VM_PASSWORD" ssh "$MARINER_UNAME"@"$MARINER_PUBLIC_IP" -o StrictHostKeyChecking=no "$Command"
          echo "Task is complete"
        workingDirectory: '$(System.DefaultWorkingDirectory)/Mariner-Setup-Script'

    - task: Bash@3
      enabled: true
      displayName: 'Delete temporary container for mariner deployment scripts in storage account'
      env:
        RELEASE_STORAGE_ACCOUNT_KEY: $(RELEASE_STORAGE_ACCOUNT_KEY)
        SP_APP_PWD_LOGIN: $(SP_APP_PWD_LOGIN)
      inputs:
        targetType: 'inline'
        script: |
          echo "Logging into Azure"
          
          az login --service-principal --username "$SP_APP_ID_LOGIN" --password "$SP_APP_PWD_LOGIN" --tenant "$TENANT_ID" --output "none"
          
          CONTAINER=$(az storage container exists --name "$RELEASE_STORAGE_ACCOUNT_TEMP_CONTAINER_NAME" --account-name "$RELEASE_STORAGE_ACCOUNT_NAME" --account-key "$RELEASE_STORAGE_ACCOUNT_KEY" -o tsv)
          
          if [ "$CONTAINER" == "True" ]; then
            echo "Deleting temp container  \"$RELEASE_STORAGE_ACCOUNT_TEMP_CONTAINER_NAME\" for mariner deployment scripts"
            az storage container delete \
            --account-name $(RELEASE_STORAGE_ACCOUNT_NAME) \
            --account-key $(RELEASE_STORAGE_ACCOUNT_KEY) \
            --name "$RELEASE_STORAGE_ACCOUNT_TEMP_CONTAINER_NAME"

            echo "Deleted temp container  \"$RELEASE_STORAGE_ACCOUNT_TEMP_CONTAINER_NAME\" for mariner deployment scripts"
          fi
        workingDirectory: '$(System.DefaultWorkingDirectory)'

    
- stage: Release
  jobs:
  - deployment: 'Release'
    displayName: 'Release bundle zip to storage account'
    environment: 'ApproveARMRelease'
    variables:
      - group: ${{variables.Variable_Group}}
    strategy:
      runOnce:
        deploy:
          steps: 
          - checkout: self

          - task: DownloadPipelineArtifact@2
            enabled: true
            displayName: 'Download artifacts from Build Pipeline'
            inputs:
              buildType: 'specific'
              project: '1ab7de3c-f8b7-4b59-be5a-fa78b4f4570c'
              definition: '10'
              buildVersionToDownload: 'latest'
              targetPath: '$(System.DefaultWorkingDirectory)'

          - task: Bash@3
            enabled: true
            displayName: 'Upload the deployment bundle mariner zip to release storage account'
            env:
              RELEASE_STORAGE_ACCOUNT_KEY: $(RELEASE_STORAGE_ACCOUNT_KEY)
              SP_APP_PWD_LOGIN: $(SP_APP_PWD_LOGIN)
            inputs:
              targetType: 'inline'
              script: |
                echo "Logging into Azure"
                
                az login --service-principal --username "$SP_APP_ID_LOGIN" --password "$SP_APP_PWD_LOGIN" --tenant "$TENANT_ID" --output "none"

                CONTAINER=$(az storage container exists --name "$RELEASE_STORAGE_ACCOUNT_CONTAINER_NAME" --account-name "$RELEASE_STORAGE_ACCOUNT_NAME" --account-key "$RELEASE_STORAGE_ACCOUNT_KEY" -o tsv)
                
                if [ "$CONTAINER" == "False" ];then
                  echo "Creating container \"RELEASE_STORAGE_ACCOUNT_CONTAINER_NAME\" in storage account"
                  
                  az storage container create \
                  --account-name $(RELEASE_STORAGE_ACCOUNT_NAME) \
                  --account-key $(RELEASE_STORAGE_ACCOUNT_KEY) \
                  --name "$RELEASE_STORAGE_ACCOUNT_CONTAINER_NAME" \
                
                  az storage container set-permission \
                  --account-name $(RELEASE_STORAGE_ACCOUNT_NAME) \
                  --account-key $(RELEASE_STORAGE_ACCOUNT_KEY) \
                  --name "$RELEASE_STORAGE_ACCOUNT_CONTAINER_NAME" \
                  --public-access blob
                fi
                
                echo "Uploading deployment bundle zip to storage account"
                
                az storage blob upload \
                  --account-name $(RELEASE_STORAGE_ACCOUNT_NAME) \
                  --account-key $(RELEASE_STORAGE_ACCOUNT_KEY) \
                  --container-name "$RELEASE_STORAGE_ACCOUNT_CONTAINER_NAME" \
                  --file deployment-bundle-mariner.zip \
                  --name "$(buildSuffix)/deployment-bundle-mariner.zip"
                
                az storage blob upload \
                  --account-name $(RELEASE_STORAGE_ACCOUNT_NAME) \
                  --account-key $(RELEASE_STORAGE_ACCOUNT_KEY) \
                  --container-name "$RELEASE_STORAGE_ACCOUNT_CONTAINER_NAME" \
                  --file deployment-bundle-mariner.zip \
                  --name deployment-bundle-mariner.zip
                
                cd '$(System.DefaultWorkingDirectory)/Mariner-Setup-Script'

                echo "Updating sas url for deployment bundle zip"
                SCRIPTS_URL="https://${RELEASE_STORAGE_ACCOUNT_NAME}.blob.core.windows.net/${RELEASE_STORAGE_ACCOUNT_CONTAINER_NAME}/deployment-bundle-mariner.zip"
                sed -i 's#^\(SAS_URL[ ]*=\).*#\1\"'"$SCRIPTS_URL"'\"#g' "mariner-setup.sh"
                echo "Updated sas url for deployment bundle mariner zip"
                
                az storage blob upload \
                  --account-name $(RELEASE_STORAGE_ACCOUNT_NAME) \
                  --account-key $(RELEASE_STORAGE_ACCOUNT_KEY) \
                  --container-name "$RELEASE_STORAGE_ACCOUNT_CONTAINER_NAME" \
                  --file mariner-setup.sh \
                  --name "mariner-setup.sh"
                
                echo "Updating sas url for deployment bundle zip"
                SCRIPTS_URL="https://${RELEASE_STORAGE_ACCOUNT_NAME}.blob.core.windows.net/${RELEASE_STORAGE_ACCOUNT_CONTAINER_NAME}/$(buildSuffix)/deployment-bundle-mariner.zip"
                sed -i 's#^\(SAS_URL[ ]*=\).*#\1\"'"$SCRIPTS_URL"'\"#g' "mariner-setup.sh"
                echo "Updated sas url for deployment bundle mariner zip"
                
                az storage blob upload \
                  --account-name $(RELEASE_STORAGE_ACCOUNT_NAME) \
                  --account-key $(RELEASE_STORAGE_ACCOUNT_KEY) \
                  --container-name "$RELEASE_STORAGE_ACCOUNT_CONTAINER_NAME" \
                  --file mariner-setup.sh \
                  --name "$(buildSuffix)/mariner-setup.sh"
              workingDirectory: '$(System.DefaultWorkingDirectory)/deployment-bundle-mariner'

          - task: Bash@3
            enabled: true
            displayName: 'Delete the resource group of test environment'
            env:
              SP_APP_PWD_LOGIN: $(SP_APP_PWD_LOGIN)
            inputs:
              targetType: 'inline'
              script: |
                # Exit the script on any error
                set -e
                
                echo "Logging to Azure"
                
                az login --service-principal --username "$SP_APP_ID_LOGIN" --password "$SP_APP_PWD_LOGIN" --tenant "$TENANT_ID" --output "none"
                
                PRINCIPAL_ID=$(az identity show -n "$MANAGED_IDENTITY" -g "$RESOURCE_GROUP_AMS" --query "principalId" -o tsv)
                az role assignment delete --scope "/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RESOURCE_GROUP_DEVICE" --assignee "$PRINCIPAL_ID"

                echo "Deleting resource group for IoT Hub \"$RESOURCE_GROUP_AMS\""
                
                az group delete --resource-group "$RESOURCE_GROUP_AMS" --yes --no-wait
                
                echo "Triggered deletion of resource group \"$RESOURCE_GROUP_AMS\""
              workingDirectory: '$(System.DefaultWorkingDirectory)'